{"/home/travis/build/npmtest/node-npmtest-phaser-tiled/test.js":"/* istanbul instrument in package npmtest_phaser_tiled */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-phaser-tiled/lib.npmtest_phaser_tiled.js":"/* istanbul instrument in package npmtest_phaser_tiled */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_phaser_tiled = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_phaser_tiled = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-phaser-tiled/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-phaser-tiled && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_phaser_tiled */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_phaser_tiled\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_phaser_tiled.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_phaser_tiled.rollup.js'] =\n            local.assetsDict['/assets.npmtest_phaser_tiled.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_phaser_tiled.__dirname +\n                    '/lib.npmtest_phaser_tiled.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-phaser-tiled/node_modules/phaser-tiled/src/index.js":"module.exports = {\n    utils: require('./utils')\n};\n","/home/travis/build/npmtest/node-npmtest-phaser-tiled/node_modules/phaser-tiled/src/utils.js":"var zlib    = require('zlibjs');\nvar Buffer  = require('buffer').Buffer;\n\nvar decodeB64 = (typeof window !== 'undefined' && window.atob) || require('Base64').atob;\n\nvar utils = module.exports = {};\n\nutils.destroyTexture = function (texture, callDestroy) {\n    if (callDestroy !== false) {\n        texture.destroy();\n    }\n\n    texture.baseTexture = null;\n    texture.frame = null;\n    texture.trim = null;\n    texture.crop = null;\n    texture._uvs = null;\n};\n\nutils.stringToBuffer = function (str) {\n    var len = str.length;\n    var buf = new Buffer(len);\n\n    for (var i = 0; i < len; i++) {\n        buf[i] = str.charCodeAt(i);\n    }\n\n    return buf;\n};\n\nutils.cacheKey = function (key, type, name) {\n    return key + '_' + type + (name ? '_' + name : '');\n};\n\nutils.decompressBase64Data = function (raw, encoding, compression) {\n    // TODO: This assumes base64 encoding, need to check encoding param\n    var str = decodeB64(raw);\n    var buf = utils.stringToBuffer(str);\n\n    // decompress\n    if (compression === 'gzip') {\n        return zlib.gunzipSync(buf);\n    }\n    else if (compression === 'zlib') {\n        return zlib.inflateSync(buf);\n    }\n\n    return buf;\n};\n\n/**\n * Parses an array of numbers that represent a hitArea into the actual shape.\n *\n * For example: `[1, 1, 15]` is a Circle (`[x, y, radius]`); `[1, 1, 15, 15]` is a Rectangle\n * (`[x, y, width, height]`); and any length >= 5 is a polygon in the form `[x1, y1, x2, y2, ..., xN, yN]`.\n *\n * @method parseHitArea\n * @param value {Array<Number>} The array to parse\n * @return {Circle|Rectangle|Polygon} The parsed out shape\n */\nutils.parseHitArea = function (hv) {\n    var shape;\n\n    // odd number of values\n    if (hv.length % 2 !== 0 && hv.length !== 3) {\n        throw new RangeError(\n            'Strange number of values for hitArea! Should be a flat array of values, like: ' +\n            '[cx,cy,di] for a circle, [x,y,w,h] for a rectangle, or [x,y,x,y,...] for other polygons.'\n        );\n    }\n\n    // a circle x,y,r\n    if (hv.length === 3) {\n        shape = new Phaser.Circle(hv[0], hv[1], hv[2]);\n    }\n    // a rectangle x,y,w,h\n    else if (hv.length === 4) {\n        shape = new Phaser.Rectangle(hv[0], hv[1], hv[2], hv[3]);\n    }\n    // generic polygon\n    else {\n        shape = new Phaser.Polygon(hv);\n    }\n\n    return shape;\n};\n\n/**\n * Parses an object of string properties into potential javascript types. First it attempts to\n * convert to a number, if that fails it checks for the string 'true' or 'false' and changes it\n * to the actual Boolean value, then it attempts to parse a string as JSON.\n *\n * @method parseTiledProperties\n * @param value {Array<Number>} The array to parse\n * @return {Circle|Rectangle|Polygon} The parsed out shape\n */\nutils.parseTiledProperties = function (obj) {\n    obj = obj || {};\n\n    if (!obj || obj.__tiledparsed) {\n        return obj;\n    }\n\n    for (var k in obj) {\n        var v = obj[k];\n        var n = parseFloat(v, 10);\n\n        // try to massage numbers\n        if (n === 0 || n) {\n            obj[k] = n;\n        }\n        // true values\n        else if (v === 'true') {\n            obj[k] = true;\n        }\n        // false values\n        else if (v === 'false') {\n            obj[k] = false;\n        }\n        // anything else is either a string or json\n        else {\n            try {\n                v = JSON.parse(v);\n                obj[k] = v;\n            } catch (e) {\n                // ignore error\n            }\n        }\n    }\n\n    if (obj.hitArea) {\n        obj.hitArea = utils.parseHitArea(obj.hitArea);\n    }\n\n    if (obj.body === 'static' || obj.sensor) {\n        obj.mass = Infinity;\n        obj.inertia = Infinity;\n    }\n\n    obj.__tiledparsed = true;\n\n    return obj;\n};\n","/home/travis/build/npmtest/node-npmtest-phaser-tiled/node_modules/phaser-tiled/src/browser.js":"var utils = require('./utils');\nvar physics = require('./physics');\n\n/**\n * @class Phaser.Plugin.Tiled\n * @classdesc Phaser - Tiled Plugin\n *\n * @constructor\n * @extends Phaser.Plugin\n *\n * @param {Phaser.Game} game - A reference to the currently running game.\n * @param {Any} parent - The object that owns this plugin, usually Phaser.PluginManager.\n */\nfunction Tiled(game, parent) {\n    Phaser.Plugin.call(this, game, parent);\n}\n\n//  Extends the Phaser.Plugin template, setting up values we need\nTiled.prototype = Object.create(Phaser.Plugin.prototype);\nTiled.prototype.constructor = Tiled;\n\nmodule.exports = Tiled;\n\n// Tiled.Tile          = require('./tiled/Tile');\nTiled.Tileset       = require('./tiled/Tileset');\nTiled.Tilemap       = require('./tiled/Tilemap');\nTiled.Tilelayer     = require('./tiled/Tilelayer');\nTiled.Objectlayer   = require('./tiled/Objectlayer');\nTiled.utils         = utils;\n\nvar originals = {\n    gameObjectFactory: {\n        tiledmap: Phaser.GameObjectFactory.prototype.tiledmap\n    },\n    loader: {\n        tiledmap: Phaser.Loader.prototype.tiledmap,\n        loadFile: Phaser.Loader.prototype.loadFile,\n        jsonLoadComplete: Phaser.Loader.prototype.jsonLoadComplete,\n        xmlLoadComplete: Phaser.Loader.prototype.xmlLoadComplete,\n        processPack: Phaser.Loader.prototype.processPack\n    },\n    physics: {\n        p2: {\n            convertTiledmap: Phaser.Physics.P2 ? Phaser.Physics.P2.prototype.convertTiledmap : null,\n            convertTiledCollisionObjects: Phaser.Physics.P2 ? Phaser.Physics.P2.prototype.convertTiledCollisionObjects : null\n        },\n        ninja: {\n            convertTiledmap: Phaser.Physics.Ninja ? Phaser.Physics.Ninja.prototype.convertTiledmap : null\n        }\n    }\n};\n\nTiled.prototype.init = function () {\n    Phaser.GameObjectFactory.prototype.tiledmap = GameObjectFactory_tiledmap;\n    Phaser.Loader.prototype.tiledmap = Loader_tiledmap;\n    Phaser.Loader.prototype.loadFile = Loader_loadFile;\n    Phaser.Loader.prototype.jsonLoadComplete = Loader_jsonLoadComplete;\n    Phaser.Loader.prototype.xmlLoadComplete = Loader_xmlLoadComplete;\n    Phaser.Loader.prototype.processPack = Loader_processPack;\n\n    if (Phaser.Physics.P2) {\n        Phaser.Physics.P2.prototype.convertTiledmap = physics.p2.convertTiledmap;\n        Phaser.Physics.P2.prototype.convertTiledCollisionObjects = physics.p2.convertTiledCollisionObjects;\n    }\n\n    if (Phaser.Physics.Ninja) {\n        Phaser.Physics.Ninja.prototype.convertTiledmap = physics.ninja.convertTiledmap;\n    }\n};\n\nTiled.prototype.destroy = function () {\n    Phaser.Plugin.prototype.destroy.apply(this, arguments);\n\n    Phaser.GameObjectFactory.prototype.tiledmap = originals.gameObjectFactory.tiledmap;\n    Phaser.Loader.prototype.tiledmap = originals.loader.tiledmap;\n    Phaser.Loader.prototype.loadFile = originals.loader.loadFile;\n    Phaser.Loader.prototype.jsonLoadComplete = originals.loader.jsonLoadComplete;\n    Phaser.Loader.prototype.xmlLoadComplete = originals.loader.xmlLoadComplete;\n    Phaser.Loader.prototype.processPack = originals.loader.processPack;\n\n    if (originals.physics.p2.convertTiledmap) {\n        Phaser.Physics.P2.prototype.convertTiledmap = originals.physics.p2.convertTiledmap;\n        Phaser.Physics.P2.prototype.convertTiledCollisionObjects = originals.physics.p2.convertTiledCollisionObjects;\n    }\n\n    if (originals.physics.ninja.convertTiledmap) {\n        Phaser.Physics.Ninja.prototype.convertTiledmap = originals.physics.ninja.convertTiledmap;\n    }\n};\n\nfunction GameObjectFactory_tiledmap(key, group) {\n    return new Tiled.Tilemap(this.game, key, group);\n}\n\n/**\n * Add a new tilemap loading request.\n *\n * @method Phaser.Loader#tilemap\n * @param {string} key - Unique asset key of the tilemap data.\n * @param {string} [url] - The url of the map data file (csv/json)\n * @param {object} [data] - An optional JSON data object. If given then the url is ignored and this JSON\n *      object is used for map data instead.\n * @param {number} [format=Tiled.Tilemap.CSV] - The format of the map data. Either Tiled.Tilemap.CSV\n *      or Tiled.Tilemap.TILED_JSON.\n * @return {Phaser.Loader} This Loader instance.\n */\nfunction Loader_tiledmap(key, url, data, format) {\n    if (typeof format === 'undefined') { format = Tiled.Tilemap.CSV; }\n\n    /*eslint-disable no-eq-null, eqeqeq */\n    if (url == null && data == null) {\n        console.warn('Phaser.Loader.tiledmap - Both url and data are null. One must be set.');\n\n        return this;\n    }\n    /*eslint-enable no-eq-null, eqeqeq */\n\n    //  A map data object has been given\n    if (data) {\n        switch (format) {\n            //  A csv string or object has been given\n            case Tiled.Tilemap.CSV:\n                break;\n\n            //  A json string or object has been given\n            case Tiled.Tilemap.TILED_JSON:\n                if (typeof data === 'string') {\n                    data = JSON.parse(data);\n                }\n                break;\n\n            //  An xml string or document has been given\n            case Tiled.Tilemap.TILED_XML:\n                if (typeof data === 'string') {\n                    data = utils.parseXML(data);\n                }\n                break;\n        }\n\n        this.game.cache.addTilemap(key, null, data, format);\n    }\n    else {\n        this.addToFileList('tiledmap', key, url, { format: format });\n    }\n\n    return this;\n}\n\nfunction Loader_loadFile(file) {\n    originals.loader.loadFile.apply(this, arguments);\n\n    if (file.type === 'tiledmap') {\n        if (file.format === Tiled.Tilemap.TILED_JSON) {\n            this.xhrLoad(file, this.transformUrl(file.url, file), 'text', this.jsonLoadComplete);\n        }\n        else if (file.format === Tiled.Tilemap.CSV) {\n            this.xhrLoad(file, this.transformUrl(file.url, file), 'text', this.csvLoadComplete);\n        }\n        else if (file.format === Tiled.Tilemap.TILED_XML) {\n            this.xhrLoad(file, this.transformUrl(file.url, file), 'text', this.xmlLoadComplete);\n        }\n        else {\n            this.asyncComplete(file, 'invalid Tilemap format: ' + file.format);\n        }\n    }\n}\n\n/**\n * Successfully loaded a JSON file.\n *\n * @method Phaser.Loader#jsonLoadComplete\n * @param {object} file - File associated with this request\n * @param {XMLHttpRequest} xhr\n */\nfunction Loader_jsonLoadComplete(file, xhr) {\n    var data = JSON.parse(xhr.responseText);\n\n    if (file.type === 'tilemap' || file.type === 'tiledmap')\n    {\n        this.game.cache.addTilemap(file.key, file.url, data, file.format);\n    }\n    else if (file.type === 'json')\n    {\n        this.game.cache.addJSON(file.key, file.url, data);\n    }\n    else\n    {\n        this.game.cache.addTextureAtlas(file.key, file.url, file.data, data, file.format);\n    }\n\n    this.asyncComplete(file);\n}\n\n/**\n * Successfully loaded an XML file.\n *\n * @method Phaser.Loader#xmlLoadComplete\n * @param {object} file - File associated with this request\n * @param {XMLHttpRequest} xhr\n */\nfunction Loader_xmlLoadComplete(file, xhr) {\n    // Always try parsing the content as XML, regardless of actually response type\n    var data = xhr.responseText;\n    var xml = this.parseXml(data);\n\n    if (!xml)\n    {\n        var responseType = xhr.responseType || xhr.contentType; // contentType for MS-XDomainRequest\n        console.warn('Phaser.Loader - ' + file.key + ': invalid XML (' + responseType + ')');\n        this.asyncComplete(file, 'invalid XML');\n        return;\n    }\n\n    if (file.type === 'tilemap' || file.type === 'tiledmap') {\n        this.game.cache.addTilemap(file.key, file.url, xml, file.format);\n    }\n    else if (file.type === 'bitmapfont')\n    {\n        this.game.cache.addBitmapFont(file.key, file.url, file.data, xml, file.xSpacing, file.ySpacing);\n    }\n    else if (file.type === 'textureatlas')\n    {\n        this.game.cache.addTextureAtlas(file.key, file.url, file.data, xml, file.format);\n    }\n    else if (file.type === 'xml')\n    {\n        this.game.cache.addXML(file.key, file.url, xml);\n    }\n\n    this.asyncComplete(file);\n\n}\n\n// the same as the core one, but we add 'tiledmap'\nfunction Loader_processPack(pack) {\n    var packData = pack.data[pack.key];\n\n    if (!packData)\n    {\n        console.warn('Phaser.Loader - ' + pack.key + ': pack has data, but not for pack key');\n        return;\n    }\n\n    for (var i = 0; i < packData.length; i++)\n    {\n        var file = packData[i];\n\n        switch (file.type)\n        {\n            case 'image':\n                this.image(file.key, file.url, file.overwrite);\n                break;\n\n            case 'text':\n                this.text(file.key, file.url, file.overwrite);\n                break;\n\n            case 'json':\n                this.json(file.key, file.url, file.overwrite);\n                break;\n\n            case 'script':\n                this.script(file.key, file.url, file.callback, pack.callbackContext || this);\n                break;\n\n            case 'binary':\n                this.binary(file.key, file.url, file.callback, pack.callbackContext || this);\n                break;\n\n            case 'spritesheet':\n                this.spritesheet(file.key, file.url, file.frameWidth, file.frameHeight,\n                        file.frameMax, file.margin, file.spacing);\n                break;\n\n            case 'audio':\n                this.audio(file.key, file.urls, file.autoDecode);\n                break;\n\n            case 'audiosprite':\n                this.audio(file.key, file.urls, file.jsonURL);\n                break;\n\n            case 'tilemap':\n                this.tilemap(file.key, file.url, file.data, Phaser.Tilemap[file.format]);\n                break;\n\n            case 'tiledmap':\n                this.tiledmap(file.key, file.url, file.data, Tiled.Tilemap[file.format]);\n                break;\n\n            case 'physics':\n                this.physics(file.key, file.url, file.data, Phaser.Loader[file.format]);\n                break;\n\n            case 'bitmapFont':\n                this.bitmapFont(file.key, file.textureURL, file.xmlURL, file.xmlData, file.xSpacing, file.ySpacing);\n                break;\n\n            case 'atlasJSONArray':\n                this.atlasJSONArray(file.key, file.textureURL, file.atlasURL, file.atlasData);\n                break;\n\n            case 'atlasJSONHash':\n                this.atlasJSONHash(file.key, file.textureURL, file.atlasURL, file.atlasData);\n                break;\n\n            case 'atlasXML':\n                this.atlasXML(file.key, file.textureURL, file.atlasURL, file.atlasData);\n                break;\n\n            case 'atlas':\n                this.atlas(file.key, file.textureURL, file.atlasURL, file.atlasData, Phaser.Loader[file.format]);\n                break;\n        }\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-phaser-tiled/node_modules/phaser-tiled/src/physics.js":"module.exports = {\n    p2: {\n        /**\n        * Goes through all tiles in the given Tilemap and TilemapLayer and converts those set to collide into physics\n        * bodies. Only call this *after* you have specified all of the tiles you wish to collide with calls like\n        * Tilemap.setCollisionBetween, etc. Every time you call this method it will destroy any previously created\n        * bodies and remove them from the world. Therefore understand it's a very expensive operation and not to be\n        * done in a core game update loop.\n        *\n        * @method Phaser.Physics.P2#convertTilemap\n        * @param {Phaser.Tilemap} map - The Tilemap to get the map data from.\n        * @param {number|string|Phaser.TilemapLayer} [layer] - The layer to operate on. If not given will default\n        *       to map.currentLayer.\n        * @param {boolean} [addToWorld=true] - If true it will automatically add each body to the world, otherwise\n        *       it's up to you to do so.\n        * @param {boolean} [optimize=true] - If true adjacent colliding tiles will be combined into a single body\n        *       to save processing. However it means you cannot perform specific Tile to Body collision responses.\n        * @return {array} An array of the Phaser.Physics.P2.Body objects that were created.\n        */\n        // convertTiledmap: function (map, layer, addToWorld, optimize) {\n        //\n        //     if (typeof addToWorld === 'undefined') { addToWorld = true; }\n        //     if (typeof optimize === 'undefined') { optimize = true; }\n        //     if (typeof layer === 'undefined') { layer = map.currentLayer; }\n        //\n        //     layer = map.getTilelayer(layer);\n        //\n        //     if (!layer) {\n        //         return;\n        //     }\n        //\n        //     //  If the bodies array is already populated we need to nuke it\n        //     this.clearTilemapLayerBodies(map, layer.index);\n        //\n        //     var width = 0,\n        //         sx = 0,\n        //         sy = 0,\n        //         tile, body, right;\n        //\n        //     for (var y = 0, h = layer.size.y; y < h; y++)\n        //     {\n        //         width = 0;\n        //\n        //         for (var x = 0, w = layer.size.x; x < w; x++)\n        //         {\n        //             if (!layer.tiles[y]) {\n        //                 continue;\n        //             }\n        //\n        //             tile = layer.tiles[y][x];\n        //\n        //             if (tile && tile.collides)\n        //             {\n        //                 if (optimize)\n        //                 {\n        //                     right = map.getTileRight(layer.index, x, y);\n        //\n        //                     if (width === 0)\n        //                     {\n        //                         sx = tile.x;\n        //                         sy = tile.y;\n        //                         width = tile.width;\n        //                     }\n        //\n        //                     if (right && right.collides)\n        //                     {\n        //                         width += tile.width;\n        //                     }\n        //                     else\n        //                     {\n        //                         body = this.createBody(sx, sy, 0, false);\n        //\n        //                         body.addRectangle(width, tile.height, width / 2, tile.height / 2, 0);\n        //\n        //                         if (addToWorld)\n        //                         {\n        //                             this.addBody(body);\n        //                         }\n        //\n        //                         layer.bodies.push(body);\n        //\n        //                         width = 0;\n        //                     }\n        //                 }\n        //                 else\n        //                 {\n        //                     body = this.createBody(tile.x, tile.y, 0, false);\n        //\n        //                     body.clearShapes();\n        //                     body.addRectangle(tile.width, tile.height, tile.width / 2, tile.height / 2, tile.rotation);\n        //\n        //                     if (addToWorld)\n        //                     {\n        //                         this.addBody(body);\n        //                     }\n        //\n        //                     layer.bodies.push(body);\n        //                 }\n        //             }\n        //         }\n        //     }\n        //\n        //     return layer.bodies;\n        //\n        // },\n        /**\n        * Converts all of the polylines objects inside a Tiled ObjectGroup into physics bodies that are added to the world.\n        * Note that the polylines must be created in such a way that they can withstand polygon decomposition.\n        *\n        * @method Phaser.Physics.P2#convertCollisionObjects\n        * @param {Phaser.Tilemap} map - The Tilemap to get the map data from.\n        * @param {number|string|Phaser.TilemapLayer} [layer] - The layer to operate on, defaults to map.currentLayer.\n        * @param {boolean} [addToWorld=true] - If true it will automatically add each body to the world.\n        * @return {array} An array of the Phaser.Physics.Body objects that have been created.\n        */\n        convertTiledCollisionObjects: function (map, layer, addToWorld) {\n\n            if (typeof addToWorld === 'undefined') { addToWorld = true; }\n            if (typeof layer === 'undefined') { layer = map.currentLayer; }\n\n            layer = map.getObjectlayer(layer);\n\n            if (!layer) {\n                return;\n            }\n\n            for (var i = 0, len = layer.objects.length; i < len; i++)\n            {\n                var object = layer.objects[i];\n\n                var body = this.createBody(object.x, object.y, 0, false);\n\n                // polygon defined area\n                if (object.polygon || object.polyline) {\n                    if (!body.addPolygon(null, (object.polygon || object.polyline).map(mapPointToArray))) {\n                        console.warn('Unable to add poly collision body for object:', object);\n                        continue;\n                    }\n                }\n                // currently only circles are supported by P2, so we just use the width\n                else if (object.ellipse) {\n                    body.addCircle(object.width, object.width / 2, object.width / 2, object.rotation);\n                }\n                // no polygon, use rectangle defined by object itself\n                else {\n                    body.addRectangle(object.width, object.height, object.width / 2, object.height / 2, object.rotation);\n                }\n\n                if (!body.data.shapes[0]) {\n                    console.warn('No shape created for object:', object);\n                    continue;\n                }\n\n                body.data.shapes[0].sensor = !!(object.properties && object.properties.sensor);\n\n                if (object.properties && typeof object.properties.collisionResponse === 'boolean') {\n                    body.data.shapes[0].collisionResponse = object.properties.collisionResponse;\n                }\n\n                var bodyType = object.properties && object.properties.bodyType || 'static';\n\n                body[bodyType] = true;\n\n                body.tiledObject = object;\n\n                if (addToWorld) {\n                    this.addBody(body);\n                }\n\n                layer.bodies.push(body);\n            }\n        }\n    },\n\n    ninja: {\n        /**\n        * Goes through all tiles in the given Tilemap and TilemapLayer and converts those set to collide into physics\n        * bodies. Only call this *after* you have specified all of the tiles you wish to collide with calls like\n        * Tilemap.setCollisionBetween, etc. Every time you call this method it will destroy any previously created\n        * bodies and remove them from the world. Therefore understand it's a very expensive operation and not to be\n        * done in a core game update loop.\n        *\n        * In Ninja the Tiles have an ID from 0 to 33, where 0 is 'empty', 1 is a full tile, 2 is a 45-degree slope,\n        * etc. You can find the ID list either at the very bottom of `Tile.js`, or in a handy visual reference in the\n        * `resources/Ninja Physics Debug Tiles` folder in the repository. The slopeMap parameter is an array that controls\n        * how the indexes of the tiles in your tilemap data will map to the Ninja Tile IDs. For example if you had 6\n        * tiles in your tileset: Imagine the first 4 should be converted into fully solid Tiles and the other 2 are 45-degree\n        * slopes. Your slopeMap array would look like this: `[ 1, 1, 1, 1, 2, 3 ]`. Where each element of the array is\n        * a tile in your tilemap and the resulting Ninja Tile it should create.\n        *\n        * @method Phaser.Physics.Ninja#convertTilemap\n        * @param {Phaser.Tilemap} map - The Tilemap to get the map data from.\n        * @param {number|string|Phaser.TilemapLayer} [layer] - The layer to operate on. Defaults to map.currentLayer.\n        * @param {object} [slopeMap] - The tilemap index to Tile ID map.\n        * @return {array} An array of the Phaser.Physics.Ninja.Tile objects that were created.\n        */\n        // convertTiledmap: function (map, layer, slopeMap) {\n        //\n        //     layer = map.getTilelayer(layer);\n        //\n        //     if (!layer) {\n        //         return;\n        //     }\n        //\n        //     //  If the bodies array is already populated we need to nuke it\n        //     this.clearTilemapLayerBodies(map, layer);\n        //\n        //     for (var y = 0, h = layer.size.y; y < h; y++)\n        //     {\n        //         if (!layer.tiles[y]) {\n        //             continue;\n        //         }\n        //\n        //         for (var x = 0, w = layer.size.x; x < w; x++)\n        //         {\n        //             var tile = layer.tiles[y][x],\n        //                 index = (y * layer.size.x) + x;\n        //\n        //             if (tile && slopeMap.hasOwnProperty(index))\n        //             {\n        //                 var body = new Phaser.Physics.Ninja.Body(\n        //                     this,\n        //                     null,\n        //                     3,\n        //                     slopeMap[index],\n        //                     0,\n        //                     tile.worldX + tile.centerX,\n        //                     tile.worldY + tile.centerY,\n        //                     tile.width,\n        //                     tile.height\n        //                 );\n        //\n        //                 layer.bodies.push(body);\n        //             }\n        //         }\n        //     }\n        //\n        //     return layer.bodies;\n        //\n        // }\n    }\n};\n\nfunction mapPointToArray(obj) {\n    return [obj.x, obj.y];\n}\n","/home/travis/build/npmtest/node-npmtest-phaser-tiled/node_modules/phaser-tiled/src/constants.js":"module.exports = {\n    /**\n     * @property CSV\n     * @type {Number}\n     * @static\n     * @final\n     */\n    CSV: 0,\n\n    /**\n     * @property CSV\n     * @type {Number}\n     * @static\n     * @final\n     */\n    TILED_JSON: 1,\n\n    /**\n     * @property CSV\n     * @type {Number}\n     * @static\n     * @final\n     */\n    TILED_XML: 2,\n\n    /**\n     * @property CSV\n     * @type {Number}\n     * @static\n     * @final\n     */\n    NORTH: 0,\n\n    /**\n     * @property CSV\n     * @type {Number}\n     * @static\n     * @final\n     */\n    EAST: 1,\n\n    /**\n     * @property CSV\n     * @type {Number}\n     * @static\n     * @final\n     */\n    SOUTH: 2,\n\n    /**\n     * @property CSV\n     * @type {Number}\n     * @static\n     * @final\n     */\n    WEST: 3\n};\n"}